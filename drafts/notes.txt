Things patterns need to implement


children: ObjectRange
childs: array of arrays


isLiteral: bool
minSize: int

firstSolidIndex: int
lastSolidIndex: int

isFilled: bool
isComplete: bool
following: ObjectRange
isEnd: 
isBelow
isDirectlyBelow
canSkip
string
firsts
lasts
maxSize
equals

Best way to find parents
	lazy computation (don't search through all the parents)
	Pattern Objects:
		pretty simple, just loop through the ups
	Literals:
		Way 1: everything is a range
			loop through all ranges and see which ranges contain the char
				add parents of ranges (and up index)
		Way 2: loop though all patterns with literals
			if the current literal matches any of the literals, choose that one as an up
		Goal: map from a char to a set of Raises


Up struct {
	parent: patternID
	index: integer
}
Up.prototype.toString = function() {
	return parent + ':' + index;
}