Constructs can be generalized between different contexts (languages)

Take for example the print statement

Print[message]

This can be translated into different languages

Jacascript:
console.log(message)

Python:
print(message)

c++
    dependencies: #include <iostream>
std::cout << message << std::endl;

This is the art of translating programming languages

These translations need to go both ways, from ideal to text and from text to ideal

ideal <--> text

While[condition, body]

Javascript:
while (condition) {
    body
}

Python:
while condition:
    body

c++
while (condition) {
    body
}

matlab
while condition
    body
end

Single_line_comment[message]

for (var i = 0; i < 10; i++) {
    console.log('i: ' + i);
}

for i in range(10):
    print('i: {}'.format(i))

for (int i = 0; i < 10; i++) {
    std::cout << "i: " << i << endl;
}

This is really difficult to do, even for simple loops
    maybe that is why it is worth doing

Compilers do this, and even they struggle converting from one format to another
    this is like an arbitrary compiler
    I don't need to write the compiler code, I just need to make a generalized framework

1: text to ideal
    use generalized patterns to make ideal representations
        what about the details like spacing and tabs?
            I guess just remember previous choices and replicate
                this seems iffy

I need to figure out how to store algorithm information parallel to formating info

Or just figure out how to store different views of the same text

Views:
    raw text, just a list of characters
    algorithm, the essential bits to what the document says/does
    formatting, the non-essential bits that don't change the message
        but make the message easier to read as raw text

Different (pat)+ interpretations
    (ws)+ can usually change because the white space is just for formatting
    (letter)+ usually can't change because the name of the variable is important

What about comments
    They shouldn't change because their message changes the message of the doc
    they can change because the algorithm changes

Figure out what patterns are crutial to the message
for example, words are message crutial because they reference variables
some white space +'s are not message critical because they can change without changing the message

If I want to minimize a c++ file, I can
    remove extra linebreaks and spaces
    remove comments

Alright, the message can have different components
    like comments and algorithm

and these can be tweaked or removed based on how the message should change
It's all about viewing messages from different angles

groups can be message critical or not message critical

