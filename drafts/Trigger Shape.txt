Trigger Shape
-------------

.trigger
    pattern that starts the trigger

.pattern
    pattern added after the trigger pattern


Pattern Instances
-----------------

.data
    array that holds a list of pattern instances contained within the current PI
        also labeled with their state when grouped (maybe)

.core_data
    array that holds integers (from .data) for PIs that directly come from the pattern

.trigger_data
    array of arrays
        one array for each trigger
        each sub-array holds indexes of PIs grouped from the respective trigger

Meta Characters
---------------

line_start
    technically a character of zero length
    shows up before characters that start lines
    stored as set of integers
        each number corresponds to the character that starts the line
    if (character index in linestart)...

line_end
    a character ends the line if it is followed by a newline or end of file

file_start
    the first character

file_end
    the last character


I like
    cheese and
    stuff.

[
     0: [I]         core
     1: [ ]         space passive
     2: [like]      core
     3: [\n]        space passive
     5: [    ]      space passive
     6: [cheese]    core
     7: [ ]         space passive
     8: [and]       core
     9: [\n]        space passive
    10: [    ]      space passive
    11: [stuff]     core
    12: [.]         core
]

.core_data
    [0, 2, 6, 8, 11, 12]

.trigger_data
    [1, 3, 5, 7, 9, 10]

Passive[
    letter*, '.'
    '\n' or ' ' or '\t'
]

def a:
    stuff
    things
    1 +
    2 +
    3

for = 'for'

in = 'in'

sentence = word, (ws, word)+, '.'

letter = <a-z,A-Z>

word = <a-z,A-Z>+


1 +
    2 +
        3 +
// comment
4 + 5 + 6
    + 7

{1+2+3+4+5+6+7}

Go even deeper
{1,2,3,4,5,6,7}
{+,+,+,+,+,+}

insert PIs before indexes

{+ 1, + 2, + 3, + 4, + 5, + 6}

Data is an ordered list of Instance indexes
    either the index of a char
    OR
    a reference to a Pattern Instance

    This enables patterns to store data that is not adjacent in the string!

Characters
1| |+|\n|\t|2| |+|\n|\t|\t|3| |+|\n|/|/| |c|o|m|m|e|n|t|\n|4| |+| |5| |+| |6|\n|\t|+| |7|EOF
0           5           10          15        20        25         30        35          40

Groups
 0: Number Series = {0,5,11,26,30,34,39}
 1: Addition = {0g, 2,7,13,28,32,37}
 2: New Lines = {1g, 3,8,14,35}
 3: Tabs = {2g, 4,9,10,36}
 4: Comment = {15,16,17,18,19,20,21,22,23,24,25}
 5: Total = {3g,4g}

Now, I just need to recognize this shit

Rules:
    every character belongs to exactly one group
    
ws_char = ' ' or '\t'

ws = ws_char+

function = 'def', ws, word, ':', '\n', Trigger[
    trigger: linestart
    trigger pattern: '\t'
    pattern: statement, ['\n', statement]+
]

statement = word or Passive[
    passive pattern: ' ' or '\n'
    pattern: number, ('+', number)*
]

function{{def}, { }, {a}, {:}, {\n}, {
    {\t}, {stuff}, {\n},
    {\t}, {things}, {\n},
    {\t}, {
        {1}, { }, {+}, {\n},
        {\t}, {2}, { }, {+}, {\n},
        {\t}, {3}
    }
}}

Parallel Data Storage
---------------------

1 +
    2 +
        3 +
4 + 5 + 6
    + 7

This information is stored in different ways
Base: 1+2+3+4+5+6+7
With spaces: 1 +2 +3 +4 + 5 + 6+ 7
With new lines:
1 +
2 +
3 +
4 + 5 + 6
+ 7

With indentation:
1 +
    2 +
        3 +
4 + 5 + 6
    + 7

Indentation[New Lines[Spaces[base]]]

Indentation information needs to be applyied to the underlying structure
